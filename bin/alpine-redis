#!/bin/sh
# <UDF name="FQDN" label="The hostname for the new Linode." />
# <UDF name="AWS_ACCESS_KEY_ID" Label="AWS API Key ID" />
# <UDF name="AWS_SECRET_ACCESS_KEY" Label="AWS Secret Access Key" />
# <UDF name="AWS_REGION" Label="AWS Region" />
# <UDF name="REDIS_PASSWORD" Label="redis root user password" />
# <UDF name="REDIS_PORT" Label="redis port" />

set -ex
exec >/root/stackscript.log 2>&1
echo "Linode Variable Values:  LINODE_ID: $LINODE_ID,  LINODE_LISHUSERNAME: $LINODE_LISHUSERNAME,  LINODE_RAM: $LINODE_RAM,  LINODE_DATACENTERID:$LINODE_DATACENTERID"
source <ssinclude StackScriptID="931877">

function add_packages() {
    echo "Adding packages..."
    apk add --update \
      ca-certificates \
      openssl \
      lsof \
      procps \
      tzdata \
      redis
    update-ca-certificates --fresh
}
function setup_aws() {
    install_awscli
    echo "Setup awscli..."
    mkdir ~/.aws
  cat > ~/.aws/config <<CONFIG
[default]
region = ${AWS_REGION}
CONFIG
  cat > ~/.aws/credentials <<CREDS
[default]
aws_access_key_id = ${AWS_ACCESS_KEY_ID}
aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
CREDS
    # Test AWS Credentials stored in Env vars
    echo $(aws sts get-caller-identity)
}
function redis_configure() {
    [ ! -n "$1" ] && {
        printf "redis_configure() requires the redis_password as its first argument\n"
        return 1;
    }
    local redis_password="$1"
    local conf_path=${2:-/etc/redis.conf}
    echo "Configuring redis..."
      cat > ${conf_path} <<CONFIG
port ${REDIS_PORT}
bind * -::*
user default off sanitize-payload ~* &* -@all
user trivialsec sanitize-payload ~* +@all on >${REDIS_PASSWORD}
tcp-backlog 511
unixsocket /run/redis/redis.sock
unixsocketperm 770
timeout 0
tcp-keepalive 300
loglevel notice
logfile /var/log/redis/redis.log
databases 2
always-show-logo no
set-proc-title yes
proc-title-template "{title} {listen-addr} {server-mode}"
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
rdb-del-sync-files no
dir /var/lib/redis
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-diskless-load disabled
repl-disable-tcp-nodelay no
replica-priority 100
acllog-max-len 128
maxclients 10000
maxmemory-policy volatile-lru
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no
lazyfree-lazy-user-del no
lazyfree-lazy-user-flush no
oom-score-adj no
oom-score-adj-values 0 200 800
disable-thp yes
appendonly no
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
dynamic-hz yes
aof-rewrite-incremental-fsync yes
rdb-save-incremental-fsync yes
lfu-log-factor 10
lfu-decay-time 1
jemalloc-bg-thread yes
CONFIG

    rc-update add redis default
    rc-service redis start
    netstat -tulpn
}
function install() {
    harden_ssh
    cat << EOT > /etc/ssh/banner
 _____      _       _       _ __
/__   \_ __(_)_   _(_) __ _| / _\ ___  ___
  / /\/ '__| \ \ / / |/ _\` | \ \ / _ \/ __|
 / /  | |  | |\ V /| | (_| | |\ \  __/ (__
 \/   |_|  |_| \_/ |_|\__,_|_\__/\___|\___|
EOT
    export PATH="$PATH:/root/.local/bin"
    echo 'export PATH="$PATH:/root/.local/bin"' >> ~/.profile
    echo -e "/sbin/ifconfig eth0 | awk '/inet / { print \$2 }' | sed 's/addr://'\necho\nw\necho\niostat\necho\nmpstat\necho\ndf\necho\nfree\necho\nnetstat -tulpn" >> ~/.profile
    setup_swap ${LINODE_RAM}
    setup_hostname ${FQDN}
    setup_timezone UTC
    patch_os
    enable_auto_updates
    enable_fail2ban
    add_packages
    setup_aws
    redis_configure ${REDIS_PASSWORD}
    setup_firewall $(network_interface) 22 ${REDIS_PORT}
    echo "Stackscript finished"

}

install
rc-status
stackscript_cleanup
echo $(date +'%F') > /root/.deployed
echo "Installation complete!"
